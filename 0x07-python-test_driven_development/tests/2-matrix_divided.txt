Test File for the ``2-matrix_divided`` module
=========================================

The 2-matrix_divided module contains one function called matrix_divided.
Its prototype is : def matrix_divided(matrix, div):
This function takes a 2D lists of numbers, 'matrix'; and divided each atomic
item by a given 'div'.
----------------------------------------------------------------------------

    >>> # import the module first.
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>>
    >>> # Testing normal expected inputs
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
    >>> matrix
    [[1, 2, 3], [4, 5, 6]]
    >>>
    >>> # Testing sublists with different length
    >>> matrix = [[3, 9], [12, 15, 3]]
    >>> matrix_divided(matrix, 2) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size
    >>>
    >>> # Testing division of a valid matrix by 0
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 0) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero
    >>>
    >>> # Testing div as type different to int and float
    >>> matrix_divided(matrix, True) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    TypeError: div must be a number
    >>>
    >>> # Testing not mathing type for matrix and a valid divisor
    >>> item_of_different_kinds = [100, 3.14, 'string', None, True, {1, 2}]
    >>> for matrix in item_of_different_kinds:
    ...     matrix_divided(matrix, 3) # doctest: +ELLIPSIS
    ... 
    Traceback (most recent call last):
    ...
    TypeError: ... matrix (list of lists) of integers/floats
    >>>
    >>> # Testing for overflow divisor: Infinity and - Infinity
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], float('inf'))
    [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]
    >>>
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], -float('inf'))
    [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]
    >>>
