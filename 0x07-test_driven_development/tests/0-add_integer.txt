This is the test for ``0-add_integer`` module

first the module to test is imported
>>> add_integer = __import__("0-add_integer").add_integer
>>>
==============================================================
Now, we use the add_intger function to test some special cases

    >>>
    >>> # Testing 2 normal inputs
    >>> print(add_integer(1, 2))
    3
    >>> print(add_integer(100, -2))
    98
    >>>
    >>> # Testing when only the first is given
    >>> print(add_integer(2))
    100
    >>> print(add_integer(12,))
    110
    >>>
    >>> # Testing addititon of bool and an integer
    >>> print(add_integer(True, 5)) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
    >>>
    >>> # Testing the addition of an integer and a string
    >>> print(add_integer(4, 'string')) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer
    >>>
    >>> # Testing None as single input
    >>> print(add_integer(None)) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    TypeError: ... must be an integer
    >>>
    >>> # Testing the addition of None and an integer
    >>> print(add_integer(None, 5)) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    TypeError: ... must be an integer
    >>>
    >>> # Testing a bool as single input
    >>> print(add_integer(True)) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    TypeError: ... must be an integer
    >>>
    >>> # Testing for negative Infinity
    >>> print(add_integer(float('-inf')))
    89
    >>>
    >>> # Testing for positive Infinity
    >>> print(add_integer(float('inf')))
    89
    >>>
    >>> # Testing for 2 input opposed Infinity
    >>> print(add_integer(float('-inf'), float('inf')))
    0
    >>>
    >>> # Testing for 2 input opposed Infinity
    >>> print(add_integer(float('inf'), float('-inf')))
    0
